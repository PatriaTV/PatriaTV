{"version":3,"sources":["companies.js","App.js","components/Movie.js","components/Company.js","components/NotFound.js","serviceWorker.js","index.js","logo.png"],"names":["companies","disney","marvel","pixar","starwars","App","state","movies","suggest","handleClick","page","id","_this","props","history","push","concat","componentDidMount","axios","get","then","res","data","setState","_this2","this","highlightItem","filter","movie","highlighted","map","item","react_default","a","createElement","key","className","card","cover","alt","title","src","onClick","companiesList","Object","keys","col","md","process","newList","slice","poster","suggestionsList","length","logo","row","gutter","Component","MovieDisplay","loading","skeleton","active","autoplay","modalVisible","playMovie","icon","type","theme","twoToneColor","tag","color","company","description","modal","visible","onCancel","handleCancel","footer","width","wrapClassName","video","allow","frameBorder","allowFullScreen","Movie","goToHome","iframe","document","querySelector","console","log","iframeSrc","Number","match","params","spin","Movie_MovieDisplay","CompanyDisplay","Company","_this3","Company_CompanyDisplay","NotFound","Boolean","window","location","hostname","ReactDOM","render","react_router_dom","react_router","exact","path","component","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.8166dda8.chunk.js","sourcesContent":["const companies = {\n    disney: \"Disney\",\n    marvel: \"Marvel\",\n    pixar: \"Pixar\",\n    starwars: \"Star Wars\"\n};\n\nexport default companies;","import React, { Component } from 'react';\nimport { Row, Col, Card } from 'antd';\nimport 'antd/dist/antd.css';\n\nimport logo from './logo.png';\nimport './stylesheets/App.scss';\n\nimport companies from './companies';\nimport axios from 'axios';\n\nclass App extends Component {\n\n  state = {\n    companies,\n    movies: [],\n    suggest: []\n  }\n\n  handleClick = (page, id) => {\n    this.props.history.push(`/${page}/${id}`);\n  }\n\n  componentDidMount = () => {\n    axios.get(`http://api.elorri.fr/disney-plus/movies`)\n      .then(res => {\n        const movies = res.data;\n        axios.get(`http://api.elorri.fr/disney-plus/suggest`)\n        .then(res => {\n          const suggest = res.data;\n          this.setState({ movies, suggest });\n        });\n      });\n    \n    \n  }\n\n  render() {\n    const movies = this.state.movies;\n    const suggest = this.state.suggest;\n    const highlightItems = movies.filter(movie => movie.highlighted);\n    const highlightItem = highlightItems.map(item => {\n      return (\n        <div key={item.id} className=\"highlight-item\">\n          <Card\n            cover={\n              <img\n                alt={item.title}\n                src={item.cover}\n              />\n            }\n            onClick={() => this.handleClick(\"movie\", item.id)}\n          />\n        </div>\n      );\n    });\n\n    const companiesList = Object.keys(companies).map(key => {\n      return (\n        <Col key={key} className=\"company\" md={6}>\n          <Card\n            cover={\n              <img\n                alt={companies[key]}\n                src={`${process.env.PUBLIC_URL}/img/companies/logo-${key}.png`}\n              />\n            }\n            onClick={() => this.handleClick(\"company\", key)}\n          />\n        </Col>\n      );\n    });\n\n    const newList = movies.slice(0, 6).map(movie => {\n      return (\n        <Col key={movie.id} className=\"item\" md={4}>\n          <Card\n            cover={\n              <img\n                alt={movie.title}\n                src={movie.poster}\n              />\n            }\n            onClick={() => this.handleClick(\"movie\", movie.id)}\n          />\n        </Col>\n      );\n    });\n    \n    const suggestionsList = suggest.slice(suggest.length - 3).map(movie => {\n      return (\n        <Col key={movie.id} className=\"item\" md={8}>\n          <Card\n            cover={\n              <img\n                alt={movie.title}\n                src={movie.cover}\n              />\n            }\n            onClick={() => this.handleClick(\"movie\", movie.id)}\n          />\n        </Col>\n      );\n    });\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </header>\n\n        <div className=\"App-container\">\n          {highlightItem}\n\n          <div className=\"companies\">\n            <Row gutter={16}>\n              {companiesList}\n            </Row>\n          </div>\n\n          <div className=\"new\">\n            <h2>Nouveautés</h2>\n            <Row gutter={16}>\n              {newList}\n            </Row>\n          </div>\n\n          <div className=\"suggestions\">\n            <h2>Suggestions</h2>\n            <Row gutter={16}>\n              {suggestionsList}\n            </Row>\n          </div>\n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport { Modal, Spin, Tag, Skeleton, Icon } from 'antd';\nimport 'antd/dist/antd.css';\n\nimport logo from '../logo.png';\nimport '../stylesheets/App.scss';\n\n//import movies from '../movies';\nimport axios from 'axios';\n\nconst MovieDisplay = props => {\n    if (props.loading) {\n        return <Skeleton active />;\n    } else {\n\n        const autoplay = props.modalVisible ? \"autoplay=1\" : \"autoplay=0\";\n\n        return (\n            <div className=\"movie\">\n                <div className=\"movie-poster\">\n                    <img alt={props.movie.title} src={props.movie.poster} />\n                    <div className=\"play-wrapper\" onClick={props.playMovie}>\n                        <Icon type=\"play-circle\" theme=\"twoTone\" twoToneColor=\"#01b9dc\" />\n                    </div>\n                </div>\n                <div className=\"movie-body\">\n                    <h1>{props.movie.title}</h1>\n                    <Tag color=\"#01B9DC\">{props.movie.company}</Tag>\n                    <p>{props.movie.description}</p>\n                </div>\n\n                <Modal visible={props.modalVisible}\n                    onCancel={props.handleCancel}\n                    footer={null}\n                    width={\"100%\"}\n                    wrapClassName={\"movie-modal\"}\n                >\n                    <iframe src={`${props.movie.video}?${autoplay}&controls=1&showinfo=0&modestbranding=1&autohide=1`} title={props.movie.title} allow=\"autoplay\" frameBorder={0} allowFullScreen />\n                </Modal>\n            </div>\n        );\n    }\n}\n\nexport default class Movie extends Component {\n\n    state = {\n        movie: {},\n        loading: true,\n        modalVisible: false\n    }\n\n    goToHome = () => {\n        this.props.history.push(`/`);\n    }\n\n    playMovie = () => {\n        this.setState({\n            modalVisible: true,\n        });\n    }\n\n    handleCancel = () => {\n\n        // Arrêter la video à la fermeture de la popin\n        const iframe = document.querySelector('iframe');\n        console.log(iframe);\n        if (iframe) {\n            let iframeSrc = iframe.src;\n            iframe.src = iframeSrc;\n        }\n\n        this.setState({\n            modalVisible: false,\n        });\n    }\n\n    componentDidMount = () => {\n        const id = Number(this.props.match.params.id);\n        axios.get(`http://api.elorri.fr/disney-plus/movie/${id}`)\n            .then(res => {\n                const movie = res.data;\n                console.log(movie);\n                this.setState({ movie, loading: false });\n            });\n    }\n\n    render() {\n        console.log(\"render\");\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    {this.state.loading ? <Spin /> : null}\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" onClick={() => this.goToHome()} />\n                </header>\n\n                <div className=\"App-container\">\n                    <MovieDisplay loading={this.state.loading} movie={this.state.movie} modalVisible={this.state.modalVisible} playMovie={() => this.playMovie()} handleCancel={() => this.handleCancel()} />\n                </div>\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react'\nimport { Row, Col, Card, Skeleton, Spin } from 'antd';\nimport 'antd/dist/antd.css';\n\nimport logo from '../logo.png';\nimport '../stylesheets/App.scss';\n\nimport axios from 'axios';\n\nconst CompanyDisplay = props => {\n    console.log(props);\n    if (props.loading) {\n        return <Skeleton active />;\n    } else {\n        const companyMovies = props.movies.map(movie => {\n            return (\n                <Col key={movie.id} className=\"item\" md={4}>\n                    <Card\n                        cover={\n                            <img\n                                alt={movie.title}\n                                src={movie.poster}\n                            />\n                        }\n                    />\n                </Col>\n            );\n        });\n\n        return companyMovies;\n    }\n}\n\nexport default class Company extends Component {\n\n    state = {\n        movies: [],\n        loading: true\n    }\n\n    goToHome() {\n        this.props.history.push(`/`);\n    }\n\n    componentDidMount() {\n        const company = this.props.match.params.id;\n\n        axios.get(`http://api.elorri.fr/disney-plus/company/${company}`)\n        .then(res => {\n            const movies = res.data;\n            this.setState({ movies, loading: false });\n        });\n    }\n\n    render() {\n\n        const company = this.props.match.params.id;\n\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    {this.state.loading ? <Spin /> : null}\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" onClick={() => this.goToHome()} />\n                </header>\n\n                <div className=\"App-container\">\n                    <div className=\"company-intro\">\n                        <div className=\"company-logo\">\n                            <img\n                                alt={company}\n                                src={`${process.env.PUBLIC_URL}/img/companies/logo-${company}.png`}\n                            />\n                        </div>\n                        <div className=\"company-text\">\n                            <span>vous présente</span>\n                            <span>tout son</span>\n                            <span>catalogue</span>\n                        </div>\n                    </div>\n\n                    <Row gutter={16}>\n                        <CompanyDisplay loading={this.state.loading} movies={this.state.movies} company={company} />\n                    </Row>\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\n\nconst NotFound = () => <h2 className='notFound'>Y'a rien ici!</h2>\n\nexport default NotFound;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Movie from './components/Movie';\nimport Company from './components/Company';\nimport NotFound from './components/NotFound';\nimport * as serviceWorker from './serviceWorker';\n\nimport {\n    BrowserRouter as Router,\n    Route,\n    Switch\n} from 'react-router-dom';\n\nconst Root = () => (\n    <Router>\n        <Switch>\n            <Route exact path='/' component={App} />\n            <Route path='/company/:id' component={Company} />\n            <Route path='/movie/:id' component={Movie} />\n            <Route component={NotFound} />\n        </Switch>\n    </Router>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.28ef2350.png\";"],"sourceRoot":""}